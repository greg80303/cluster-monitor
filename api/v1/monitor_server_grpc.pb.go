// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterMonitorServiceClient is the client API for ClusterMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterMonitorServiceClient interface {
	ListClusterSnapshots(ctx context.Context, in *ListClusterSnapshotsRequest, opts ...grpc.CallOption) (*ListClusterSnapshotsResponse, error)
	ListGpuUsages(ctx context.Context, in *ListGpuUsagesRequest, opts ...grpc.CallOption) (*ListGpuUsagesResponse, error)
}

type clusterMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterMonitorServiceClient(cc grpc.ClientConnInterface) ClusterMonitorServiceClient {
	return &clusterMonitorServiceClient{cc}
}

func (c *clusterMonitorServiceClient) ListClusterSnapshots(ctx context.Context, in *ListClusterSnapshotsRequest, opts ...grpc.CallOption) (*ListClusterSnapshotsResponse, error) {
	out := new(ListClusterSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/llmariner.clustermonitor.server.v1.ClusterMonitorService/ListClusterSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterMonitorServiceClient) ListGpuUsages(ctx context.Context, in *ListGpuUsagesRequest, opts ...grpc.CallOption) (*ListGpuUsagesResponse, error) {
	out := new(ListGpuUsagesResponse)
	err := c.cc.Invoke(ctx, "/llmariner.clustermonitor.server.v1.ClusterMonitorService/ListGpuUsages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterMonitorServiceServer is the server API for ClusterMonitorService service.
// All implementations must embed UnimplementedClusterMonitorServiceServer
// for forward compatibility
type ClusterMonitorServiceServer interface {
	ListClusterSnapshots(context.Context, *ListClusterSnapshotsRequest) (*ListClusterSnapshotsResponse, error)
	ListGpuUsages(context.Context, *ListGpuUsagesRequest) (*ListGpuUsagesResponse, error)
	mustEmbedUnimplementedClusterMonitorServiceServer()
}

// UnimplementedClusterMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterMonitorServiceServer struct {
}

func (UnimplementedClusterMonitorServiceServer) ListClusterSnapshots(context.Context, *ListClusterSnapshotsRequest) (*ListClusterSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterSnapshots not implemented")
}
func (UnimplementedClusterMonitorServiceServer) ListGpuUsages(context.Context, *ListGpuUsagesRequest) (*ListGpuUsagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGpuUsages not implemented")
}
func (UnimplementedClusterMonitorServiceServer) mustEmbedUnimplementedClusterMonitorServiceServer() {}

// UnsafeClusterMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterMonitorServiceServer will
// result in compilation errors.
type UnsafeClusterMonitorServiceServer interface {
	mustEmbedUnimplementedClusterMonitorServiceServer()
}

func RegisterClusterMonitorServiceServer(s grpc.ServiceRegistrar, srv ClusterMonitorServiceServer) {
	s.RegisterService(&ClusterMonitorService_ServiceDesc, srv)
}

func _ClusterMonitorService_ListClusterSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterMonitorServiceServer).ListClusterSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.clustermonitor.server.v1.ClusterMonitorService/ListClusterSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterMonitorServiceServer).ListClusterSnapshots(ctx, req.(*ListClusterSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterMonitorService_ListGpuUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGpuUsagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterMonitorServiceServer).ListGpuUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.clustermonitor.server.v1.ClusterMonitorService/ListGpuUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterMonitorServiceServer).ListGpuUsages(ctx, req.(*ListGpuUsagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterMonitorService_ServiceDesc is the grpc.ServiceDesc for ClusterMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.clustermonitor.server.v1.ClusterMonitorService",
	HandlerType: (*ClusterMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusterSnapshots",
			Handler:    _ClusterMonitorService_ListClusterSnapshots_Handler,
		},
		{
			MethodName: "ListGpuUsages",
			Handler:    _ClusterMonitorService_ListGpuUsages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/monitor_server.proto",
}
